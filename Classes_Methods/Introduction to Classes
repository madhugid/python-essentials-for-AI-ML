[MUSIC]
Aside from functions, classes is one of those things that you
will encounter frequently in Python. Now I tend to favor functions but
classes definitely have, they have their own spot and
their own reason for being used and implemented so that you can
create powerful programs as well. So I'll show you a few of the basics
here with these notebooks. So the most basic class
that you can create, you will use the class keyword in Python. And then you'll have a name similar
like in functions, you have def and then the name and then colon, that's
how you create or define a new class. I'm using pass here because this
class is empty, it's meaningless. This line 4 right here
doesn't do anything. And then in line 6, I instantiate. So once I call this class, it becomes
part of, it becomes an instance. It has been created,
it has been constructed. Think about line 3 through 4, kind of like the blueprint of
what this thing is going to be. And then line 6 is when it's up and
running, it's been created, it's there, it exists. So that's the most basic
class that you can have. Now, let's see what we
can find once we try to poke around the attributes
that we have here. There's certainly a lot
of different things here, all of them start with double underscore. And we'll see at least one of them,
which is the _init_ or also in Python, we tend to say Dunder. Dunder init because of
a double underscore. Now, all of these are special
methods that belong to a class but you will probably not be using most
of these in your day-to-day but they're useful to know that they're there. And once you create an instance of
a class even if it's as basic as these two line class that doesn't do anything,
you'll have a lot of things to work with. Let me scroll down here and
now do another type of class construct that you may see and
it might feel kind of weird. On line 3 here,
we have this basic class again but we are using object like
what is that object? Well, older versions of Python, really older versions of Python
used to pass in this object here to the class when it was defining
the creation or the definition of a class. This is no longer the case in modern
Python so you won't be seeing it. Some people tend to use it still but
in modern Python, that's not the case. Regardless of what you see,
it doesn't matter that the way the class is going to work is the same and it really
doesn't matter if you have it or not. It's just useful to know that in all
the versions of Python, this was a thing. All right, so what are the other
things that you can do here? So I'm going to create
a class named dog and I'm going to use a thing
called class attributes. Now I'll start explaining a little bit
of all of the components of a class and then we'll be using them and try to
call them and see what each of them do. But in this case, on line five,
I'm using is_animal equals True. That is called a class attribute. And then I'm going to add a method. Now there is a bug here
with this method and this method is missing something
important but let's go ahead. If you're not familiar with classes, you won't be able to see what
is wrong with this class. But if you are very familiar with classes, you will see that there's a pretty
substantial problem here on line number 7. All right, so I'm going to make this run. So I defined the dog class here,
I've defined an is_animal equals True. And then I have a bark method. This is a method so
this belongs to the dog class. So if instantiated, the object here
created that instance of dog on line 10. And now, let's make it bark. When I call that,
you can see it's dog that barks so bark belongs to the dog class. And when I run this,
I'm going to get a TypeError. So why am I getting a TypeError? That is because I missed adding a keyword. You can see bark takes 0 position
arguments but 1 was given. Implicitly, Python behind the scenes
is passing an argument and that argument by
convention is called self. So we'll see more about methods later. Just be mindful that every
time you create a method of, you have to have an argument and
the first argument should be self. All right, so if I run this again and
I run this other cell again, you have dog bark which is a callable and
it will print woof. And then dog that
is_animal will be true and that's the attribute right there. Okay, so and you can create as many
instances of these class as you need. That's one of the powerful
things about classes is that it allows you to create many, many more
instances and start producing classes and objects everywhere you go. All right, but watch out for
class attributes. Now I show you that the Dog.is_animal
is a class attribute. That means that it's kind of like it's
an attribute, it belongs to the class. But if you don't instantiate it and
you make a change like this one, like I'm doing on line 2,
then I am going to be messing up every single instance of
the class that has been created. So I'm going to run this and you can see
now that is Rufus an animal will be false. So you just need to be mindful that
these might cause you problems. And if you have to define a class statute
which is perfectly fine if you know what you're doing, then you have to be
mindful that, that might change. Now that change will also
affect any future animals. So you can see here Sparky,
the object is getting created. And this animal will also be
false regardless of the fact that if I scroll all the way down,
all the way up here and line 5 will say is_animal
equals True on line number 5. All right, so
what is this self thing again? So I briefly covered what that is but you have to create that. We already run into a TypeError, you have to always pass in
this self statement there. Otherwise, you will get into trouble. That's all you need to know for now,
we'll go into more details later but just be mindful that you
have to pass in self. It is not a requirement
to call it self but it's a convention that you will
see pretty much everywhere.
